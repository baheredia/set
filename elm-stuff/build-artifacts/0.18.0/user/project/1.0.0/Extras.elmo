var _user$project$Extras$whichBorder = function (b) {
	var _p0 = b;
	if (_p0.ctor === 'Nothing') {
		return 'none';
	} else {
		var _p1 = _p0._0;
		if (_p1 === true) {
			return 'dashed';
		} else {
			return 'solid white';
		}
	}
};
var _user$project$Extras$source = function (wd) {
	var _p2 = wd;
	if (_p2.ctor === 'Nothing') {
		return '';
	} else {
		var toNombre = function (xs) {
			var _p3 = xs;
			if (_p3.ctor === '[]') {
				return '';
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p3._0),
					toNombre(_p3._1));
			}
		};
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'img/c',
			A2(
				_elm_lang$core$Basics_ops['++'],
				toNombre(_p2._0),
				'.png'));
	}
};
var _user$project$Extras$allDifferent = function (xs) {
	var _p4 = xs;
	if (_p4.ctor === '[]') {
		return true;
	} else {
		var _p8 = _p4._0;
		var _p5 = _p4._1;
		if (_p5.ctor === '[]') {
			return true;
		} else {
			var _p7 = _p5._1;
			var _p6 = _p5._0;
			return _elm_lang$core$Native_Utils.eq(_p8, _p6) ? false : (_user$project$Extras$allDifferent(
				{ctor: '::', _0: _p8, _1: _p7}) && _user$project$Extras$allDifferent(
				{ctor: '::', _0: _p6, _1: _p7}));
		}
	}
};
var _user$project$Extras$allEquals = function (xs) {
	allEquals:
	while (true) {
		var _p9 = xs;
		if (_p9.ctor === '[]') {
			return true;
		} else {
			var _p11 = _p9._1;
			var _p10 = _p11;
			if (_p10.ctor === '[]') {
				return true;
			} else {
				if (_elm_lang$core$Native_Utils.eq(_p9._0, _p10._0)) {
					var _v8 = _p11;
					xs = _v8;
					continue allEquals;
				} else {
					return false;
				}
			}
		}
	}
};
var _user$project$Extras$isSet = F3(
	function (x1s, x2s, x3s) {
		isSet:
		while (true) {
			var _p12 = x1s;
			if (_p12.ctor === '[]') {
				return true;
			} else {
				var _p17 = _p12._0;
				var _p13 = x2s;
				if (_p13.ctor === '[]') {
					return false;
				} else {
					var _p16 = _p13._0;
					var _p14 = x3s;
					if (_p14.ctor === '[]') {
						return false;
					} else {
						var _p15 = _p14._0;
						if (_user$project$Extras$allEquals(
							{
								ctor: '::',
								_0: _p17,
								_1: {
									ctor: '::',
									_0: _p16,
									_1: {
										ctor: '::',
										_0: _p15,
										_1: {ctor: '[]'}
									}
								}
							}) || _user$project$Extras$allDifferent(
							{
								ctor: '::',
								_0: _p17,
								_1: {
									ctor: '::',
									_0: _p16,
									_1: {
										ctor: '::',
										_0: _p15,
										_1: {ctor: '[]'}
									}
								}
							})) {
							var _v12 = _p12._1,
								_v13 = _p13._1,
								_v14 = _p14._1;
							x1s = _v12;
							x2s = _v13;
							x3s = _v14;
							continue isSet;
						} else {
							return false;
						}
					}
				}
			}
		}
	});
var _user$project$Extras$isListSet = function (w1) {
	var _p18 = w1;
	if (_p18.ctor === '[]') {
		return false;
	} else {
		var _p23 = _p18._0;
		var _p19 = _p18._1;
		if (_p19.ctor === '[]') {
			return false;
		} else {
			var _p22 = _p19._0;
			var _p20 = _p19._1;
			if (_p20.ctor === '[]') {
				return false;
			} else {
				var _p21 = _p20._0;
				return (_elm_lang$core$List$isEmpty(_p23) || (_elm_lang$core$List$isEmpty(_p22) || _elm_lang$core$List$isEmpty(_p21))) ? false : A3(_user$project$Extras$isSet, _p23, _p22, _p21);
			}
		}
	}
};
var _user$project$Extras$dealCards = F2(
	function (ondeck, ontable) {
		var _p24 = ondeck;
		if (_p24.ctor === '[]') {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: ontable
			};
		} else {
			var _p29 = _p24._1;
			var _p25 = ontable;
			if (_p25.ctor === '[]') {
				return {
					ctor: '_Tuple2',
					_0: ondeck,
					_1: {ctor: '[]'}
				};
			} else {
				var _p28 = _p25._1;
				var _p27 = _p25._0;
				var _p26 = _p27;
				if (_p26.ctor === '[]') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Tuple$first(
							A2(_user$project$Extras$dealCards, _p29, _p28)),
						_1: {
							ctor: '::',
							_0: _p24._0,
							_1: _elm_lang$core$Tuple$second(
								A2(_user$project$Extras$dealCards, _p29, _p28))
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Tuple$first(
							A2(_user$project$Extras$dealCards, ondeck, _p28)),
						_1: {
							ctor: '::',
							_0: _p27,
							_1: _elm_lang$core$Tuple$second(
								A2(_user$project$Extras$dealCards, ondeck, _p28))
						}
					};
				}
			}
		}
	});
var _user$project$Extras$takeSetOut = F2(
	function (cards, bs) {
		var _p30 = cards;
		if (_p30.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p34 = _p30._1;
			var _p31 = bs;
			if (_p31.ctor === '[]') {
				return cards;
			} else {
				var _p33 = _p31._1;
				var _p32 = _p31._0;
				if (_p32 === true) {
					return {
						ctor: '::',
						_0: {ctor: '[]'},
						_1: A2(_user$project$Extras$takeSetOut, _p34, _p33)
					};
				} else {
					return {
						ctor: '::',
						_0: _p30._0,
						_1: A2(_user$project$Extras$takeSetOut, _p34, _p33)
					};
				}
			}
		}
	});
var _user$project$Extras$howManyTrue = function (_p35) {
	return _elm_lang$core$List$length(
		A2(_elm_lang$core$List$filter, _elm_lang$core$Basics$identity, _p35));
};
var _user$project$Extras$takeElementInPosition = F2(
	function (n, xs) {
		takeElementInPosition:
		while (true) {
			var _p36 = n;
			if (_p36.ctor === '[]') {
				var _p37 = xs;
				if (_p37.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(_p37._0);
				}
			} else {
				var _p38 = xs;
				if (_p38.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					var _v27 = _p36._1,
						_v28 = _p38._1;
					n = _v27;
					xs = _v28;
					continue takeElementInPosition;
				}
			}
		}
	});
var _user$project$Extras$filteredBy = F2(
	function (bls, xs) {
		filteredBy:
		while (true) {
			var _p39 = bls;
			if (_p39.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p42 = _p39._1;
				var _p40 = xs;
				if (_p40.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					var _p41 = _p40._1;
					if (_p39._0) {
						return {
							ctor: '::',
							_0: _p40._0,
							_1: A2(_user$project$Extras$filteredBy, _p42, _p41)
						};
					} else {
						var _v31 = _p42,
							_v32 = _p41;
						bls = _v31;
						xs = _v32;
						continue filteredBy;
					}
				}
			}
		}
	});
var _user$project$Extras$switchElement = F2(
	function (n, bs) {
		var _p43 = bs;
		if (_p43.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p46 = _p43._1;
			var _p45 = _p43._0;
			var _p44 = n;
			if (_p44.ctor === '[]') {
				return {ctor: '::', _0: !_p45, _1: _p46};
			} else {
				return {
					ctor: '::',
					_0: _p45,
					_1: A2(_user$project$Extras$switchElement, _p44._1, _p46)
				};
			}
		}
	});
var _user$project$Extras$flatten = function (xs) {
	flatten:
	while (true) {
		var _p47 = xs;
		if (_p47.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p49 = _p47._1;
			var _p48 = _p47._0;
			if (_p48.ctor === '[]') {
				var _v37 = _p49;
				xs = _v37;
				continue flatten;
			} else {
				return {
					ctor: '::',
					_0: _p48._0,
					_1: _user$project$Extras$flatten(
						{ctor: '::', _0: _p48._1, _1: _p49})
				};
			}
		}
	}
};
var _user$project$Extras$initialDeck = function () {
	var newOption = function (xs) {
		return {
			ctor: '::',
			_0: {ctor: '::', _0: 1, _1: xs},
			_1: {
				ctor: '::',
				_0: {ctor: '::', _0: 2, _1: xs},
				_1: {
					ctor: '::',
					_0: {ctor: '::', _0: 3, _1: xs},
					_1: {ctor: '[]'}
				}
			}
		};
	};
	var tripleOnce = function (xs) {
		return _user$project$Extras$flatten(
			A2(_elm_lang$core$List$map, newOption, xs));
	};
	return tripleOnce(
		tripleOnce(
			tripleOnce(
				tripleOnce(
					{
						ctor: '::',
						_0: {ctor: '[]'},
						_1: {ctor: '[]'}
					}))));
}();
var _user$project$Extras$Model = F5(
	function (a, b, c, d, e) {
		return {deck: a, table: b, selection: c, score: d, mode: e};
	});
var _user$project$Extras$Game = {ctor: 'Game'};
var _user$project$Extras$Start = {ctor: 'Start'};
var _user$project$Extras$ExtraCard = {ctor: 'ExtraCard'};
var _user$project$Extras$addMoreCards = F2(
	function (lst, deck) {
		var sty = F2(
			function (op1, op2) {
				return _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'background-color', _1: op1},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'cursor', _1: op2},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '100px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '100px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-flex'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'position', _1: 'relative'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'left', _1: '20px'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'align-items', _1: 'center'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					});
			});
		return ((_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(lst),
			15) > 0) || _elm_lang$core$List$isEmpty(deck)) ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(sty, 'grey', 'default'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('.'),
				_1: {ctor: '[]'}
			}) : A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(_user$project$Extras$ExtraCard),
				_1: {
					ctor: '::',
					_0: A2(sty, 'yellow', 'pointer'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('MÃ¡s cartas'),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Extras$Reset = {ctor: 'Reset'};
var _user$project$Extras$Set = {ctor: 'Set'};
var _user$project$Extras$setButton = function (b) {
	var sty = F2(
		function (op1, op2) {
			return _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'background-color', _1: op1},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'cursor', _1: op2},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '100px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-flex'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'position', _1: 'relative'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'left', _1: '20px'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'align-items', _1: 'center'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				});
		});
	var _p50 = b;
	if (_p50 === true) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(_user$project$Extras$Set),
				_1: {
					ctor: '::',
					_0: A2(sty, 'red', 'pointer'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Â¡Set!'),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(sty, 'grey', 'default'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Â¡Busca!'),
				_1: {ctor: '[]'}
			});
	}
};
var _user$project$Extras$Select = function (a) {
	return {ctor: 'Select', _0: a};
};
var _user$project$Extras$PutDeck = function (a) {
	return {ctor: 'PutDeck', _0: a};
};
var _user$project$Extras$Shuffle = {ctor: 'Shuffle'};
var _user$project$Extras$Z = {ctor: 'Z'};
var _user$project$Extras$conversion = function (n) {
	return (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) ? {ctor: '[]'} : {
		ctor: '::',
		_0: _user$project$Extras$Z,
		_1: _user$project$Extras$conversion(n - 1)
	};
};
var _user$project$Extras$putCard = F3(
	function (x, table, selection) {
		var ancho = 170;
		return A2(
			_elm_lang$html$Html$img,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$src(
					_user$project$Extras$source(
						A2(
							_user$project$Extras$takeElementInPosition,
							_user$project$Extras$conversion(x),
							table))),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$width(ancho),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'border',
									_1: _user$project$Extras$whichBorder(
										A2(
											_user$project$Extras$takeElementInPosition,
											_user$project$Extras$conversion(x),
											selection))
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$Extras$Select(
									_user$project$Extras$conversion(x))),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _user$project$Extras$extraCard = F3(
	function (n, table, selection) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(table),
			15) > 0) ? A3(_user$project$Extras$putCard, 12 + n, table, selection) : (((_elm_lang$core$Native_Utils.cmp(n, 2) < 1) && (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(table),
			12) > 0)) ? A3(_user$project$Extras$putCard, 12 + n, table, selection) : A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'}));
	});
